// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "src/http/pkg/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Storage) Create(_a0 model.Post) (model.Post, error) {
	ret := _m.Called(_a0)

	var r0 model.Post
	if rf, ok := ret.Get(0).(func(model.Post) model.Post); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Post) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFromFile provides a mock function with given fields: _a0
func (_m *Storage) CreateFromFile(_a0 model.Post) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Post) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *Storage) Delete(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *Storage) Get(_a0 uuid.UUID) (model.Post, error) {
	ret := _m.Called(_a0)

	var r0 model.Post
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Post); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Storage) GetAll() []model.Post {
	ret := _m.Called()

	var r0 []model.Post
	if rf, ok := ret.Get(0).(func() []model.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Post)
		}
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *Storage) Update(_a0 model.Post) (model.Post, error) {
	ret := _m.Called(_a0)

	var r0 model.Post
	if rf, ok := ret.Get(0).(func(model.Post) model.Post); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Post) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
